#!/usr/bin/env python3

import sys,os,re
import uuid,os.path

args = sys.argv[1:]

# Test for dry run
forreal = True
if os.getenv("DRYRUN") is not None and os.getenv("DRYRUN") not in ["n","N"]:
    forreal = False
elif os.getenv("D") is not None and os.getenv("D") not in ["n","N"]:
    forreal = False

if len(args) < 3:
    print("filesrx searchpat replpat <files>")
    print("  searchpad is regex")
    sys.exit(1)

s,r = tuple(args[:2])
files = args[2:]
print(f"""filesrx
       regex: {s}
replace with: {r}""")
sr = re.compile(s)

# only rename if we are not doing a dry run
def rn(x,y):
    if forreal:
        os.rename(x,y)
        
# find a unique unused filename
while True:
    t = str(uuid.uuid4())
    if not os.path.exists(t):
        break
print("Temp name {}".format(t))

# iterate over specified files
for x in files:
    try: # I can't recall why I stuck this in a try...except construct
      y = sr.sub(r,x)
    except:
      print(f"Regex {s} failed for file {x}")
      continue
    print(f"{x} => {y}")
    if x == y:
        pass
    elif os.path.exists(y):
        print(f"{y} already exists")
    else:
        xa = x.lower()
        ya = y.lower()
        if xa == ya:
            # this is for case insensitive, case retentive filesystems
            print("Capitalisation issue")
            print(f"Using temp name {t}: {x} --> {y}")
            rn(x,t)
            rn(t,y)
        else:
            print(f"Rename {x} --> {y}")
            rn(x,y)

